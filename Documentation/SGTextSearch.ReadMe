This document describes how we use lucene to index and search in sevaral
database fields in the SG repository.

The idea is that when the repository is changed (via the backend), an index
of the text fields 'Title', 'Keywords' and 'FreeDescription' is updated.
The front end uses this index when a text search is performed.

In order for this to work, there need to be a directory that is writable by
the back end and readable by the front end.

At the moment the use of the index is integrated in the front end. The
creation of the index is not yet integrated in the back end. The index can
be created with a stand alone application, though.

The Front End
-------------

In class DataBaseInteraction
- the method getMatchingIds(String searchText) is added. This method
  returns the id's of the games that match a text search.
- the method getSeriousGames(String searchText) is changed such that it
  uses getMatchingIds.

Class Queries is changed quite a bit. Partly this is because of new
functionality, partly because of refactoring of code.
- We use a StringBuilder to make query strings.
- The method addCommonColumns refactors code used in various places for
  selecting columns from database tables.
- The method getSeriousGame(ArrayList<Integer> ids) is the new method to
  get game data belongin to game id's.

In serverImpl.java in SGRepoBE and SGRepoFE there is a tiny change. We call
init there instead of setServletContext.


The Back End
------------

As stated above, the cration of the index is not yet integrated in the
back end. The class SGTextSearch does the actual creation of the index. It
contains a main method that can be used to do this. The program should be
called with "-p <propertyfile>", where the property file contains the index
deirectory. An example property file (sginit.) is available.

For the final situation, the idea is that there is a separate thread that
is responsible for performing updates of the index. This is the
IndexerThread. This class also contains a main method that demonstrates its
intended use. The thread should be constructed and the started
(indexer.start();). The, rebuild requests can be sent to the thread
(indexer.rebuildNeeded();). Finally, a clean shutdown of the thread can be
done.

Ideally, the rebuild_needed method will be called from the backend after
every change in the database. There can also be a separate button to
trigger a rebuild.
